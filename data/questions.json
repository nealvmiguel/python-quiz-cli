{
  "easy": [
    {
      "question": "Which data type is used to store True or False values?",
      "options": {
        "a": "string",
        "b": "int",
        "c": "bool",
        "d": "float"
      },
      "answer": "c"
    },
    {
      "question": "What is the correct file extension for Python files?",
      "options": {
        "a": ".py",
        "b": ".go",
        "c": ".js",
        "d": ".php"
      },
      "answer": "a"
    },
    {
      "question": "Which of the following is not a Python data type?",
      "options": {
        "a": "int",
        "b": "str",
        "c": "num",
        "d": "float"
      },
      "answer": "c"
    },
    {
      "question": "Which symbol is used for multiplication in Python?",
      "options": {
        "a": "x",
        "b": "%",
        "c": "*",
        "d": "^"
      },
      "answer": "c"
    },
    {
      "question": "What type of data is this: [1, 2, 3]?",
      "options": {
        "a": "tuple",
        "b": "set",
        "c": "list",
        "d": "dictionary"
      },
      "answer": "c"
    },
    {
      "question": "Which operator can be used to compare two values?",
      "options": {
        "a": "=",
        "b": "><",
        "c": "<>",
        "d": "=="
      },
      "answer": "d"
    },
    {
      "question": "What does this code print? print(2 ** 3)",
      "options": {
        "a": "6",
        "b": "5",
        "c": "9",
        "d": "8"
      },
      "answer": "d"
    },
    {
      "question": "What will this code print? print(\"5\" + \"10\")",
      "options": {
        "a": "15",
        "b": "510",
        "c": "Error",
        "d": "5 10"
      },
      "answer": "b"
    },
    {
      "question": "What is a correct syntax to output \"Hello World\" in Python?",
      "options": {
        "a": "console.log(\"Hello World\")",
        "b": "print(\"Hello World\")",
        "c": "echo(\"Hello World\")",
        "d": "fmt.Println(\"Hello, World\")"
      },
      "answer": "b"
    },
    {
      "question": "How do you inset a comment in python?",
      "options": {
        "a": "// This is a comment",
        "b": "# This is a comment",
        "c": "-- This is a comment"
      },
      "answer": "b"
    }
  ],
  "medium": [
    {
      "question": "What does the return keyword do?",
      "options": {
        "a": "Ends the program",
        "b": "Sends output to the screen",
        "c": "Stops a loop",
        "d": "Sends a value back from a function"
      },
      "answer": "d"
    },
    {
      "question": "Which keyword is used to define a function in Python?",
      "options": {
        "a": "func",
        "b": "def",
        "c": "function",
        "d": "define"
      },
      "answer": "b"
    },
    {
      "question": "What does the list() function do in python?",
      "options": {
        "a": "it converts an object to a list",
        "b": "It creates a new list.",
        "c": "It returns the length of a list.",
        "d": "It returns the number of items in a list."
      },
      "answer": "b"
    },
    {
      "question": "Which statement can immediately stop a loop in Python?",
      "options": {
        "a": "continue",
        "b": "stop",
        "c": "return",
        "d": "break"
      },
      "answer": "d"
    },
    {
      "question": "Which statement skips the current iteration in a loop but continues the loop?",
      "options": {
        "A": "break",
        "B": "stop",
        "C": "skip",
        "D": "continue"
      },
      "answer": "D"
    },
    {
      "question": "Which of the following will call a function named greet?",
      "options": {
        "A": "call greet()",
        "B": "greet[]",
        "C": "greet()",
        "D": "function greet()"
      },
      "answer": "C"
    },
    {
      "question": "What is the output of this code?\n\ndef add(a, b=2):\n    return a + b\n\nprint(add(3))",
      "options": {
        "A": "2",
        "B": "3",
        "C": "5",
        "D": "Error"
      },
      "answer": "C"
    },
    {
      "question": "What will this code print?\n\ndef greet(name):\n    print(\"Hello \" + name)\n\ngreet(\"Ben\")",
      "options": {
        "A": "Hello",
        "B": "name",
        "C": "Hello Ben",
        "D": "greet"
      },
      "answer": "C"
    },
    {
      "question": "What is the purpose of the 'def' keyword in Python?",
      "options": {
        "a": "To delete a variable",
        "b": "To define a class",
        "c": "To define a function",
        "d": "To define a loop"
      },
      "answer": "c"
    },
    {
      "question": "How many times will this loop run?\n\nfor i in range(3):\n    print(i)",
      "options": {
        "a": "0",
        "b": "2",
        "c": "3",
        "d": "4"
      },
      "answer": "c"
    }
  ],
  "hard": [
    {
      "question": "Which of the following best defines a class in Python?",
      "options": {
        "a": "A function that takes multiple arguments",
        "b": "A blueprint for creating objects",
        "c": "A loop that stores values",
        "d": "A file that contains variables"
      },
      "answer": "b"
    },
    {
      "question": "What is method overriding?",
      "options": {
        "a": "A method that cannot be used again",
        "b": "Redefining a method in a subclass",
        "c": "Deleting a parent method",
        "d": "Calling multiple methods at once"
      },
      "answer": "b"
    },
    {
      "question": "How can you safely access a private attribute in Python?",
      "options": {
        "a": "Use dot notation directly",
        "b": "Use a getter method",
        "c": " Use a global import",
        "d": "Use a static method"
      },
      "answer": "a"
    },
    {
      "question": "Which one is an advantage of composition over inheritance?",
      "options": {
        "a": "Tighter coupling",
        "b": "More shared logic",
        "c": "More flexibility and modular design",
        "d": "Fewer lines of code"
      },
      "answer": "c"
    },
    {
      "question": "What is composition in Python OOP?",
      "options": {
        "a": "A class defined inside another",
        "b": "A class that inherits methods only",
        "c": "Rewriting dunder methods",
        "d": "Using instances of other classes as attributes"
      },
      "answer": "d"
    },
    {
      "question": "Which of the following is a way to indicate a private variable in Python (by convention)?",
      "options": {
        "a": "_var",
        "b": "private_var",
        "c": "var_private",
        "d": "__varname__"
      },
      "answer": "a"
    },
    {
      "question": "What happens when you define a variable with double underscores like __hidden?",
      "options": {
        "a": "It’s ignored by the interpreter",
        "b": "It becomes completely inaccessible",
        "c": "Python performs name mangling to prevent access from outside",
        "d": "It becomes a global variable"
      },
      "answer": "c"
    },
    {
      "question": "What is the purpose of an abstract base class in Python?",
      "options": {
        "a": "To make code run faster",
        "b": "To define common interfaces for subclasses",
        "c": "To prevent inheritance",
        "d": "To implement global variables"
      },
      "answer": "b"
    },
    {
      "question": "What happens if a subclass doesn’t implement all abstract methods from its parent?",
      "options": {
        "a": "It works as usual",
        "b": "It raises a warning",
        "c": "It becomes abstract itself",
        "d": "It raises a TypeError on instantiation"
      },
      "answer": "d"
    },
    {
      "question": "Which one is an advantage of composition over inheritance?",
      "options": {
        "a": "Tighter coupling",
        "b": "More shared logic",
        "c": "More flexibility and modular design",
        "d": "Fewer lines of code"
      },
      "answer": "d"
    }
  ]
}
